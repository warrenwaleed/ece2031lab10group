-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2881;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A17;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 1084;  -- 	STORE  DVel        ; Reset API variables
           009 : 1083;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 81FF;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 81E1;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A26;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A23;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A23;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1215;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5215;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A24;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A17;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A002;  -- 	CLI    &B0010      ; disable the movement API interrupt
           027 : 8031;  -- 	CALL   AcquireData ; perform a 360 degree scan
           028 : B800;  -- 	LOADI  0
           029 : 1084;  -- 	STORE  DVel        ; zero desired forward velocity
           02A : 90C2;  -- 	IN     THETA
           02B : 1083;  -- 	STORE  DTheta      ; desired heading = current heading
           02C : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02D : 805D;  -- 	CALL   FindClosest
           02E : 9805;  -- 	OUT    SSEG2       ; useful debugging info
           02F : 1083;  -- 	STORE  DTheta
           030 : 2830;  -- 	JUMP   InfLoop
           031 : 90C2;  -- 	IN     THETA
           032 : 105A;  -- 	STORE  OrigTheta
           033 : 105B;  -- 	STORE  CurrTheta
           034 : 0A17;  -- 	LOAD   Zero
           035 : 105C;  -- 	STORE  TurnTracker
           036 : 0A22;  -- 	LOAD   Mask0
           037 : 98B2;  -- 	OUT    SONAREN
           038 : 0A17;  -- 	LOAD   Zero
           039 : 9883;  -- 	OUT    LVELCMD
           03A : 0A35;  -- 	LOAD   FSlow
           03B : 988B;  -- 	OUT    RVELCMD
           03C : 90C2;  -- 	IN     Theta
           03D : 585B;  -- 	XOR    CurrTheta
           03E : 403A;  -- 	JZERO  ADWait      ; same angle; wait until turned more
           03F : 90C2;  -- 	IN     Theta
           040 : 205A;  -- 	SUB    OrigTheta
           041 : 80E1;  -- 	CALL   Abs
           042 : 68B4;  -- 	ADDI   180         ; account for angle wrapping
           043 : 80DB;  -- 	CALL   Mod360
           044 : 6F4C;  -- 	ADDI   -180
           045 : 80E1;  -- 	CALL   Abs
           046 : 6FF6;  -- 	ADDI   -10         ; 10 degree margin
           047 : 304A;  -- 	JNEG   ADStore     ; margin not passed
           048 : B801;  -- 	LOADI  1           ; margin passed
           049 : 105C;  -- 	STORE  TurnTracker
           04A : 90C2;  -- 	IN     THETA
           04B : 105B;  -- 	STORE  CurrTheta   ; update current angle
           04C : 685A;  -- 	ADDI   90          ; since this sonar is facing left
           04D : 80DB;  -- 	CALL   Mod360      ; wrap angles >360
           04E : 6A3E;  -- 	ADDI   DataArray   ; index into the array
           04F : 1059;  -- 	STORE  ArrayIndex
           050 : 90A8;  -- 	IN     DIST0
           051 : 7859;  -- 	ISTORE ArrayIndex  ; store this data point
           052 : 085C;  -- 	LOAD   TurnTracker
           053 : 403A;  -- 	JZERO  ADWait      ; haven't turned at all
           054 : 90C2;  -- 	IN     THETA
           055 : 585A;  -- 	XOR    OrigTheta
           056 : 383A;  -- 	JPOS   ADWait
           057 : 303A;  -- 	JNEG   ADWait
           058 : 8800;  -- 	RETURN ; done
           059 : 0000;  -- 	ArrayIndex: DW 0
           05A : 0000;  -- 	OrigTheta: DW 0
           05B : 0000;  -- 	CurrTheta: DW 0
           05C : 0000;  -- 	TurnTracker: DW 0
           05D : BA3E;  -- 	LOADI  DataArray   ; get the array start address
           05E : 1059;  -- 	STORE  ArrayIndex
           05F : 1076;  -- 	STORE  CloseIndex  ; keep track of shortest distance
           060 : 6968;  -- 	ADDI   360
           061 : 1075;  -- 	STORE  EndIndex
           062 : 7059;  -- 	ILOAD  ArrayIndex  ; get the first entry of array
           063 : 1077;  -- 	STORE  CloseVal    ; keep track of shortest distance
           064 : 0859;  -- 	LOAD   ArrayIndex
           065 : 6801;  -- 	ADDI   1
           066 : 1059;  -- 	STORE  ArrayIndex  ; move to next entry
           067 : 5875;  -- 	XOR    EndIndex    ; compare with end index
           068 : 4071;  -- 	JZERO  FCDone
           069 : 7059;  -- 	ILOAD  ArrayIndex  ; get the data
           06A : 2077;  -- 	SUB    CloseVal    ; compare with current min
           06B : 3864;  -- 	JPOS   FCLoop      ; not closer; move on
           06C : 7059;  -- 	ILOAD  ArrayIndex  ; new minimum
           06D : 1077;  -- 	STORE  CloseVal
           06E : 0859;  -- 	LOAD   ArrayIndex
           06F : 1076;  -- 	STORE  CloseIndex
           070 : 2864;  -- 	JUMP   FCLoop
           071 : BA3E;  -- 	LOADI  DataArray   ; start address
           072 : 2076;  -- 	SUB    CloseIndex  ; start address - entry address
           073 : 80E2;  -- 	CALL   Neg         ; entry address - start address
           074 : 8800;  -- 	RETURN
           075 : 0000;  -- 	EndIndex:   DW 0
           076 : 0000;  -- 	CloseIndex: DW 0
           077 : 0000;  -- 	CloseVal:   DW 0
           078 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           079 : 0A17;  -- 	LOAD   Zero        ; Stop everything.
           07A : 9883;  -- 	OUT    LVELCMD
           07B : 988B;  -- 	OUT    RVELCMD
           07C : 98B2;  -- 	OUT    SONAREN
           07D : 0880;  -- 	LOAD   DEAD        ; An indication that we are dead
           07E : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           07F : 287F;  -- 	JUMP   Forever     ; Do this forever.
           080 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           081 : 8085;  -- 	CALL   ControlMovement
           082 : B000;  -- 	RETI   ; return from ISR
           083 : 0000;  -- DTheta:    DW 0
           084 : 0000;  -- DVel:      DW 0
           085 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           086 : 10C5;  -- 	STORE  MaxVal
           087 : 80B2;  -- 	CALL   GetThetaErr ; get the heading error
           088 : 6002;  -- 	SHIFT  2
           089 : 10AF;  -- 	STORE  CMAErr      ; hold temporarily
           08A : 6002;  -- 	SHIFT  2           ; multiply by another 4
           08B : 80B9;  -- 	CALL   CapValue    ; get a +/- max of 50
           08C : 18AF;  -- 	ADD    CMAErr
           08D : 10AF;  -- 	STORE  CMAErr      ; now contains a desired differential
           08E : B9FE;  -- 	LOADI  510
           08F : 10C5;  -- 	STORE  MaxVal
           090 : 0884;  -- 	LOAD   DVel
           091 : 80B9;  -- 	CALL   CapValue    ; ensure velocity is valid
           092 : 1084;  -- 	STORE  DVel        ; overwrite any invalid input
           093 : 18AF;  -- 	ADD    CMAErr
           094 : 80B9;  -- 	CALL   CapValue    ; ensure velocity is valid
           095 : 10B1;  -- 	STORE  CMAR
           096 : 08AF;  -- 	LOAD   CMAErr
           097 : 80E2;  -- 	CALL   Neg         ; left wheel gets negative differential
           098 : 1884;  -- 	ADD    DVel
           099 : 80B9;  -- 	CALL   CapValue
           09A : 10B0;  -- 	STORE  CMAL
           09B : 08AF;  -- 	LOAD   CMAErr
           09C : 6001;  -- 	SHIFT  1           ; double the differential
           09D : 10AF;  -- 	STORE  CMAErr
           09E : 08B1;  -- 	LOAD   CMAR
           09F : 20B0;  -- 	SUB    CMAL        ; calculate the actual differential
           0A0 : 20AF;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0A1 : 40AA;  -- 	JZERO  CMADone
           0A2 : 10AF;  -- 	STORE  CMAErr      ; the missing part
           0A3 : 18B0;  -- 	ADD    CMAL
           0A4 : 80B9;  -- 	CALL   CapValue
           0A5 : 10B0;  -- 	STORE  CMAL
           0A6 : 08B1;  -- 	LOAD   CMAR
           0A7 : 20AF;  -- 	SUB    CMAErr
           0A8 : 80B9;  -- 	CALL   CapValue
           0A9 : 10B1;  -- 	STORE  CMAR
           0AA : 08B0;  -- 	LOAD   CMAL
           0AB : 9883;  -- 	OUT    LVELCMD
           0AC : 08B1;  -- 	LOAD   CMAR
           0AD : 988B;  -- 	OUT    RVELCMD
           0AE : 8800;  -- 	RETURN
           0AF : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           0B0 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           0B1 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           0B2 : 90C2;  -- 	IN     THETA
           0B3 : 2083;  -- 	SUB    DTheta      ; actual - desired angle
           0B4 : 80E2;  -- 	CALL   Neg         ; desired - actual angle
           0B5 : 68B4;  -- 	ADDI   180
           0B6 : 80DB;  -- 	CALL   Mod360
           0B7 : 6F4C;  -- 	ADDI   -180
           0B8 : 8800;  -- 	RETURN
           0B9 : 20C5;  -- 	SUB     MaxVal
           0BA : 38C0;  -- 	JPOS    CapVelHigh
           0BB : 18C5;  -- 	ADD     MaxVal
           0BC : 18C5;  -- 	ADD     MaxVal
           0BD : 30C2;  -- 	JNEG    CapVelLow
           0BE : 20C5;  -- 	SUB     MaxVal
           0BF : 8800;  -- 	RETURN
           0C0 : 08C5;  -- 	LOAD    MaxVal
           0C1 : 8800;  -- 	RETURN
           0C2 : 08C5;  -- 	LOAD    MaxVal
           0C3 : 80E2;  -- 	CALL    Neg
           0C4 : 8800;  -- 	RETURN
           0C5 : 01FE;  -- 	MaxVal: DW 510
           0C6 : BA3E;  -- 	LOADI   DataArray
           0C7 : 1059;  -- 	STORE   ArrayIndex
           0C8 : 6968;  -- 	ADDI    360
           0C9 : 1215;  -- 	STORE   Temp        ; Also store the end address
           0CA : 9099;  -- 	IN      UART_RDY    ; get the UART status
           0CB : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           0CC : 38CA;  -- 	JPOS    SDLoop1
           0CD : 7059;  -- 	ILOAD   ArrayIndex
           0CE : 6018;  -- 	SHIFT   -8          ; move high byte to low byte
           0CF : 9898;  -- 	OUT     UART_DAT
           0D0 : 9099;  -- 	IN      UART_RDY    ; get the UART status
           0D1 : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           0D2 : 38D0;  -- 	JPOS    SDLoop2
           0D3 : 7059;  -- 	ILOAD   ArrayIndex
           0D4 : 9898;  -- 	OUT     UART_DAT    ; send low byte
           0D5 : 0859;  -- 	LOAD    ArrayIndex
           0D6 : 6801;  -- 	ADDI    1           ; increment index
           0D7 : 1059;  -- 	STORE   ArrayIndex
           0D8 : 2215;  -- 	SUB     Temp        ; check if at end of array
           0D9 : 30CA;  -- 	JNEG    SDLoop1
           0DA : 2878;  -- 	JUMP    Die         ; when done, go to infinite loop
           0DB : 30DE;  -- 	JNEG   M360N
           0DC : 6E98;  -- 	ADDI   -360
           0DD : 28DB;  -- 	JUMP   Mod360
           0DE : 6968;  -- 	ADDI   360
           0DF : 30DE;  -- 	JNEG   M360N
           0E0 : 8800;  -- 	RETURN
           0E1 : 38E4;  -- 	JPOS   Abs_r
           0E2 : 5A16;  -- 	XOR    NegOne       ; Flip all bits
           0E3 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0E4 : 8800;  -- 	RETURN
           0E5 : 0945;  -- 	LOAD   AtanY
           0E6 : 80E1;  -- 	CALL   Abs          ; abs(y)
           0E7 : 1147;  -- 	STORE  AtanT
           0E8 : 0944;  -- 	LOAD   AtanX        ; abs(x)
           0E9 : 80E1;  -- 	CALL   Abs
           0EA : 2147;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0EB : 30F6;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0EC : 0944;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0ED : 30F3;  -- 	JNEG   A2_R3
           0EE : 8105;  -- 	CALL   A2_calc      ; Octants 1, 8
           0EF : 30F1;  -- 	JNEG   A2_R1n
           0F0 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0F1 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0F2 : 8800;  -- 	RETURN
           0F3 : 8105;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0F4 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0F5 : 8800;  -- 	RETURN
           0F6 : 0945;  -- 	LOAD   AtanY        ; Swap input arguments
           0F7 : 1147;  -- 	STORE  AtanT
           0F8 : 0944;  -- 	LOAD   AtanX
           0F9 : 1145;  -- 	STORE  AtanY
           0FA : 0947;  -- 	LOAD   AtanT
           0FB : 1144;  -- 	STORE  AtanX
           0FC : 3901;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           0FD : 8105;  -- 	CALL   A2_calc      ; else octants 6, 7
           0FE : 80E2;  -- 	CALL   Neg          ; Negatge the number
           0FF : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           100 : 8800;  -- 	RETURN
           101 : 8105;  -- 	CALL   A2_calc      ; Octants 2, 3
           102 : 80E2;  -- 	CALL   Neg          ; negate the angle
           103 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           104 : 8800;  -- 	RETURN
           105 : 0945;  -- 	LOAD   AtanY
           106 : 11A4;  -- 	STORE  d16sN        ; Y in numerator
           107 : 0944;  -- 	LOAD   AtanX
           108 : 11A5;  -- 	STORE  d16sD        ; X in denominator
           109 : 8131;  -- 	CALL   A2_div       ; divide
           10A : 09AA;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           10B : 1146;  -- 	STORE  AtanRatio
           10C : 116D;  -- 	STORE  m16sA
           10D : 116E;  -- 	STORE  m16sB
           10E : 8128;  -- 	CALL   A2_mult      ; X^2
           10F : 116D;  -- 	STORE  m16sA
           110 : 0948;  -- 	LOAD   A2c
           111 : 116E;  -- 	STORE  m16sB
           112 : 8128;  -- 	CALL   A2_mult
           113 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           114 : 11A5;  -- 	STORE  d16sD
           115 : 0946;  -- 	LOAD   AtanRatio
           116 : 11A4;  -- 	STORE  d16sN        ; Ratio in numerator
           117 : 8131;  -- 	CALL   A2_div       ; divide
           118 : 09AA;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           119 : 116D;  -- 	STORE  m16sA        ; <= result in radians
           11A : 0949;  -- 	LOAD   A2cd         ; degree conversion factor
           11B : 116E;  -- 	STORE  m16sB
           11C : 8128;  -- 	CALL   A2_mult      ; convert to degrees
           11D : 1147;  -- 	STORE  AtanT
           11E : 6017;  -- 	SHIFT  -7           ; check 7th bit
           11F : 4A18;  -- 	AND    One
           120 : 4125;  -- 	JZERO  A2_rdwn      ; round down
           121 : 0947;  -- 	LOAD   AtanT
           122 : 6018;  -- 	SHIFT  -8
           123 : 6801;  -- 	ADDI   1            ; round up
           124 : 8800;  -- 	RETURN
           125 : 0947;  -- 	LOAD   AtanT
           126 : 6018;  -- 	SHIFT  -8           ; round down
           127 : 8800;  -- 	RETURN
           128 : 814A;  -- 	CALL   Mult16s
           129 : 0972;  -- 	LOAD   mres16sH
           12A : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           12B : 1172;  -- 	STORE  mres16sH
           12C : 0971;  -- 	LOAD   mres16sL
           12D : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           12E : 4A2A;  -- 	AND    LowByte
           12F : 5172;  -- 	OR     mres16sH     ; combine high and low words of result
           130 : 8800;  -- 	RETURN
           131 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           132 : 1147;  -- 	STORE  AtanT
           133 : 0947;  -- 	LOAD   AtanT
           134 : 6FFF;  -- 	ADDI   -1
           135 : 3938;  -- 	JPOS   A2_DN        ; not done; continue shifting
           136 : 8173;  -- 	CALL   Div16s       ; do the standard division
           137 : 8800;  -- 	RETURN
           138 : 1147;  -- 	STORE  AtanT
           139 : 09A4;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           13A : 6001;  -- 	SHIFT  1
           13B : 59A4;  -- 	XOR    d16sN        ; if the sign changed,
           13C : 3140;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           13D : 59A4;  -- 	XOR    d16sN        ; get back shifted version
           13E : 11A4;  -- 	STORE  d16sN
           13F : 2933;  -- 	JUMP   A2_DL
           140 : 09A5;  -- 	LOAD   d16sD
           141 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           142 : 11A5;  -- 	STORE  d16sD
           143 : 2933;  -- 	JUMP   A2_DL
           144 : 0000;  -- AtanX:      DW 0
           145 : 0000;  -- AtanY:      DW 0
           146 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           147 : 0000;  -- AtanT:      DW 0        ; temporary value
           148 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           149 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           14A : B800;  -- 	LOADI  0
           14B : 116F;  -- 	STORE  m16sc        ; clear carry
           14C : 1172;  -- 	STORE  mres16sH     ; clear result
           14D : B810;  -- 	LOADI  16           ; load 16 to counter
           14E : 1170;  -- 	STORE  mcnt16s      
           14F : 096F;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           150 : 4154;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           151 : 0972;  -- 	LOAD   mres16sH     ; if a carry, 
           152 : 196D;  -- 	ADD    m16sA        ;  add multiplicand to result H
           153 : 1172;  -- 	STORE  mres16sH
           154 : 096E;  -- 	LOAD   m16sB
           155 : 4A18;  -- 	AND    One          ; check bit 0 of multiplier
           156 : 116F;  -- 	STORE  m16sc        ; save as next carry
           157 : 415B;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           158 : 0972;  -- 	LOAD   mres16sH     ; if bit 0 set,
           159 : 216D;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           15A : 1172;  -- 	STORE  mres16sH
           15B : 096E;  -- 	LOAD   m16sB
           15C : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           15D : 496C;  -- 	AND    c7FFF        ; clear msb
           15E : 116E;  -- 	STORE  m16sB
           15F : 0972;  -- 	LOAD   mres16sH     ; load result H
           160 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           161 : 516E;  -- 	OR     m16sB
           162 : 116E;  -- 	STORE  m16sB        ; result L now includes carry out from H
           163 : 0972;  -- 	LOAD   mres16sH
           164 : 6011;  -- 	SHIFT  -1
           165 : 1172;  -- 	STORE  mres16sH     ; shift result H >>1
           166 : 0970;  -- 	LOAD   mcnt16s
           167 : 6FFF;  -- 	ADDI   -1           ; check counter
           168 : 394E;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           169 : 096E;  -- 	LOAD   m16sB
           16A : 1171;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           16B : 8800;  -- 	RETURN              ; Done
           16C : 7FFF;  -- c7FFF: DW &H7FFF
           16D : 0000;  -- m16sA: DW 0 ; multiplicand
           16E : 0000;  -- m16sB: DW 0 ; multipler
           16F : 0000;  -- m16sc: DW 0 ; carry
           170 : 0000;  -- mcnt16s: DW 0 ; counter
           171 : 0000;  -- mres16sL: DW 0 ; result low
           172 : 0000;  -- mres16sH: DW 0 ; result high
           173 : B800;  -- 	LOADI  0
           174 : 11AB;  -- 	STORE  dres16sR     ; clear remainder result
           175 : 11A8;  -- 	STORE  d16sC1       ; clear carry
           176 : 09A4;  -- 	LOAD   d16sN
           177 : 59A5;  -- 	XOR    d16sD
           178 : 11A6;  -- 	STORE  d16sS        ; sign determination = N XOR D
           179 : B811;  -- 	LOADI  17
           17A : 11A7;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           17B : 09A5;  -- 	LOAD   d16sD
           17C : 80E1;  -- 	CALL   Abs          ; take absolute value of denominator
           17D : 11A5;  -- 	STORE  d16sD
           17E : 09A4;  -- 	LOAD   d16sN
           17F : 80E1;  -- 	CALL   Abs          ; take absolute value of numerator
           180 : 11A4;  -- 	STORE  d16sN
           181 : 09A4;  -- 	LOAD   d16sN
           182 : 601F;  -- 	SHIFT  -15          ; get msb
           183 : 4A18;  -- 	AND    One          ; only msb (because shift is arithmetic)
           184 : 11A9;  -- 	STORE  d16sC2       ; store as carry
           185 : 09A4;  -- 	LOAD   d16sN
           186 : 6001;  -- 	SHIFT  1            ; shift <<1
           187 : 51A8;  -- 	OR     d16sC1       ; with carry
           188 : 11A4;  -- 	STORE  d16sN
           189 : 09A7;  -- 	LOAD   d16sT
           18A : 6FFF;  -- 	ADDI   -1           ; decrement counter
           18B : 419B;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           18C : 11A7;  -- 	STORE  d16sT
           18D : 09AB;  -- 	LOAD   dres16sR
           18E : 6001;  -- 	SHIFT  1            ; shift remainder
           18F : 51A9;  -- 	OR     d16sC2       ; with carry from other shift
           190 : 21A5;  -- 	SUB    d16sD        ; subtract denominator from remainder
           191 : 3196;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           192 : 11AB;  -- 	STORE  dres16sR
           193 : B801;  -- 	LOADI  1
           194 : 11A8;  -- 	STORE  d16sC1       ; set carry
           195 : 2981;  -- 	JUMP   Div16s_loop
           196 : 19A5;  -- 	ADD    d16sD        ; add denominator back in
           197 : 11AB;  -- 	STORE  dres16sR
           198 : B800;  -- 	LOADI  0
           199 : 11A8;  -- 	STORE  d16sC1       ; clear carry
           19A : 2981;  -- 	JUMP   Div16s_loop
           19B : 09A4;  -- 	LOAD   d16sN
           19C : 11AA;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           19D : 09A6;  -- 	LOAD   d16sS        ; check the sign indicator
           19E : 31A0;  -- 	JNEG   Div16s_neg
           19F : 8800;  -- 	RETURN
           1A0 : 09AA;  -- 	LOAD   dres16sQ     ; need to negate the result
           1A1 : 80E2;  -- 	CALL   Neg
           1A2 : 11AA;  -- 	STORE  dres16sQ
           1A3 : 8800;  -- 	RETURN	
           1A4 : 0000;  -- d16sN: DW 0 ; numerator
           1A5 : 0000;  -- d16sD: DW 0 ; denominator
           1A6 : 0000;  -- d16sS: DW 0 ; sign value
           1A7 : 0000;  -- d16sT: DW 0 ; temp counter
           1A8 : 0000;  -- d16sC1: DW 0 ; carry value
           1A9 : 0000;  -- d16sC2: DW 0 ; carry value
           1AA : 0000;  -- dres16sQ: DW 0 ; quotient result
           1AB : 0000;  -- dres16sR: DW 0 ; remainder result
           1AC : 09D6;  -- 	LOAD   L2X
           1AD : 80E1;  -- 	CALL   Abs
           1AE : 11D8;  -- 	STORE  L2T1
           1AF : 09D7;  -- 	LOAD   L2Y
           1B0 : 80E1;  -- 	CALL   Abs
           1B1 : 21D8;  -- 	SUB    L2T1
           1B2 : 31CE;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1B3 : 19D8;  -- 	ADD    L2T1
           1B4 : 116D;  -- 	STORE  m16sa
           1B5 : B8F6;  -- 	LOADI  246       ; max * 246
           1B6 : 116E;  -- 	STORE  m16sB
           1B7 : 814A;  -- 	CALL   Mult16s
           1B8 : 0972;  -- 	LOAD   mres16sH
           1B9 : 6008;  -- 	SHIFT  8
           1BA : 11D9;  -- 	STORE  L2T2
           1BB : 0971;  -- 	LOAD   mres16sL
           1BC : 6018;  -- 	SHIFT  -8        ; / 256
           1BD : 4A2A;  -- 	AND    LowByte
           1BE : 51D9;  -- 	OR     L2T2
           1BF : 11DA;  -- 	STORE  L2T3
           1C0 : 09D8;  -- 	LOAD   L2T1
           1C1 : 116D;  -- 	STORE  m16sa
           1C2 : B868;  -- 	LOADI  104       ; min * 104
           1C3 : 116E;  -- 	STORE  m16sB
           1C4 : 814A;  -- 	CALL   Mult16s
           1C5 : 0972;  -- 	LOAD   mres16sH
           1C6 : 6008;  -- 	SHIFT  8
           1C7 : 11D9;  -- 	STORE  L2T2
           1C8 : 0971;  -- 	LOAD   mres16sL
           1C9 : 6018;  -- 	SHIFT  -8        ; / 256
           1CA : 4A2A;  -- 	AND    LowByte
           1CB : 51D9;  -- 	OR     L2T2
           1CC : 19DA;  -- 	ADD    L2T3     ; sum
           1CD : 8800;  -- 	RETURN
           1CE : 19D8;  -- 	ADD    L2T1
           1CF : 11D9;  -- 	STORE  L2T2
           1D0 : 09D8;  -- 	LOAD   L2T1
           1D1 : 11DA;  -- 	STORE  L2T3
           1D2 : 09D9;  -- 	LOAD   L2T2
           1D3 : 11D8;  -- 	STORE  L2T1
           1D4 : 09DA;  -- 	LOAD   L2T3
           1D5 : 29B4;  -- 	JUMP   CalcDist
           1D6 : 0000;  -- L2X:  DW 0
           1D7 : 0000;  -- L2Y:  DW 0
           1D8 : 0000;  -- L2T1: DW 0
           1D9 : 0000;  -- L2T2: DW 0
           1DA : 0000;  -- L2T3: DW 0
           1DB : 9802;  -- 	OUT    TIMER
           1DC : 9002;  -- 	IN     TIMER
           1DD : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1DE : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1DF : 31DC;  -- 	JNEG   Wloop
           1E0 : 8800;  -- 	RETURN
           1E1 : 81F9;  -- 	CALL   GetBattLvl
           1E2 : 41E1;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1E3 : 223B;  -- 	SUB    MinBatt
           1E4 : 31E7;  -- 	JNEG   DeadBatt
           1E5 : 1A3B;  -- 	ADD    MinBatt     ; get original value back
           1E6 : 8800;  -- 	RETURN
           1E7 : B820;  -- 	LOADI  &H20
           1E8 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1E9 : 81F9;  -- 	CALL   GetBattLvl  ; get the battery level
           1EA : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1EB : 9805;  -- 	OUT    SSEG2
           1EC : 9806;  -- 	OUT    LCD
           1ED : 0A17;  -- 	LOAD   Zero
           1EE : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1EF : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1F0 : 9807;  -- 	OUT    XLEDS
           1F1 : 81DB;  -- 	CALL   Wait1       ; 1 second
           1F2 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           1F3 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1F4 : 0A17;  -- 	LOAD   Zero
           1F5 : 9801;  -- 	OUT    LEDS        ; LEDs off
           1F6 : 9807;  -- 	OUT    XLEDS
           1F7 : 81DB;  -- 	CALL   Wait1       ; 1 second
           1F8 : 29E7;  -- 	JUMP   DeadBatt    ; repeat forever
           1F9 : 0A3D;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1FA : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1FB : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1FC : 8207;  -- 	CALL   BlockI2C    ; wait for it to finish
           1FD : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1FE : 8800;  -- 	RETURN
           1FF : 8207;  -- 	CALL   BlockI2C    ; wait for idle
           200 : 0A3C;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           201 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           202 : 0A17;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           203 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           204 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           205 : 8207;  -- 	CALL   BlockI2C    ; wait for it to finish
           206 : 8800;  -- 	RETURN
           207 : 0A17;  -- 	LOAD   Zero
           208 : 1215;  -- 	STORE  Temp        ; Used to check for timeout
           209 : 0A15;  -- 	LOAD   Temp
           20A : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           20B : 1215;  -- 	STORE  Temp
           20C : 4210;  -- 	JZERO  I2CError    ; Timeout occurred; error
           20D : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           20E : 3A09;  -- 	JPOS   BI2CL       ; If not 0, try again
           20F : 8800;  -- 	RETURN             ; Else return
           210 : 0A17;  -- 	LOAD   Zero
           211 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           212 : 9804;  -- 	OUT    SSEG1
           213 : 9805;  -- 	OUT    SSEG2       ; display error message
           214 : 2A10;  -- 	JUMP   I2CError
           215 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           216 : FFFF;  -- NegOne:   DW -1
           217 : 0000;  -- Zero:     DW 0
           218 : 0001;  -- One:      DW 1
           219 : 0002;  -- Two:      DW 2
           21A : 0003;  -- Three:    DW 3
           21B : 0004;  -- Four:     DW 4
           21C : 0005;  -- Five:     DW 5
           21D : 0006;  -- Six:      DW 6
           21E : 0007;  -- Seven:    DW 7
           21F : 0008;  -- Eight:    DW 8
           220 : 0009;  -- Nine:     DW 9
           221 : 000A;  -- Ten:      DW 10
           222 : 0001;  -- Mask0:    DW &B00000001
           223 : 0002;  -- Mask1:    DW &B00000010
           224 : 0004;  -- Mask2:    DW &B00000100
           225 : 0008;  -- Mask3:    DW &B00001000
           226 : 0010;  -- Mask4:    DW &B00010000
           227 : 0020;  -- Mask5:    DW &B00100000
           228 : 0040;  -- Mask6:    DW &B01000000
           229 : 0080;  -- Mask7:    DW &B10000000
           22A : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           22B : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           22C : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           22D : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           22E : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           22F : 036F;  -- Ft3:      DW 879
           230 : 0494;  -- Ft4:      DW 1172
           231 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           232 : 00B4;  -- Deg180:   DW 180       ; 180
           233 : 010E;  -- Deg270:   DW 270       ; 270
           234 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           235 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           236 : FF9C;  -- RSlow:    DW -100
           237 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           238 : FEA2;  -- RMid:     DW -350
           239 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           23A : FE0C;  -- RFast:    DW -500
           23B : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           23C : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           23D : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           23E : 0000;  -- 	DW 0
  END;
